# Modified to avoid conflicts

# Productions from §3 (Lexical Structure)
Literal:
	'int_literal'
	'long_literal'
	'float_literal'
	'double_literal'
	'true'
	'false'
	'character_literal'
	'string_literal'
	'null'

# Productions from §4 (Types, Values, and Variables)
Type:
	PrimitiveType
	ReferenceType

PrimitiveType:
	{Annotation} NumericType
	{Annotation} 'boolean'

NumericType:
	IntegralType
	FloatingPointType

IntegralType:
	'byte'
	'short'
	'int'
	'long'
	'char'

FloatingPointType:
	'float'
	'double'

ReferenceType:
	ClassType     # may be a TypeVariable
	ArrayType

ClassType:
	SimpleClassType
	ClassType '.' SimpleClassType

SimpleClassType:
	{Annotation} 'TypeIdentifier' [TypeArguments]

TypeVariable:
	{Annotation} 'TypeIdentifier'

ArrayType:
	PrimitiveType Dims
	# ClassType may be TypeVariable
	ClassType Dims

Dims:
	{Annotation} '[' ']' {{Annotation} '[' ']'}

TypeParameter:
	{TypeParameterModifier} 'TypeIdentifier' [TypeBound]

TypeParameterModifier:
	Annotation

TypeBound:
	# ClassType may be a TypeVariable
	'extends' ClassType {AdditionalBound}

AdditionalBound:
	'&' ClassType

TypeArguments:
	'<' TypeArgumentList '>'

TypeArgumentList:
	TypeArgument {',' TypeArgument}

TypeArgument:
	ReferenceType
	Wildcard

Wildcard:
	{Annotation} '?' [WildcardBounds]

WildcardBounds:
	'extends' ReferenceType
	'super' ReferenceType

# Productions from §6 (Names)

ModuleName:
	'Identifier'
	ModuleName '.' 'Identifier'

PackageName:
	'Identifier'
	PackageName '.' 'Identifier'

TypeName:
	'TypeIdentifier'
	PackageOrTypeName '.' 'TypeIdentifier'

ExpressionName:
	'Identifier'
	AmbiguousName '.' 'Identifier'

MethodName:
	'Identifier'
#	'UnqualifiedMethodIdentifier'

PackageOrTypeName:
	'Identifier'
	PackageOrTypeName '.' 'Identifier'

AmbiguousName:
	'Identifier'
	AmbiguousName '.' 'Identifier'

# Productions from §7 (Packages and Modules)
CompilationUnit:
	OrdinaryCompilationUnit
	ModularCompilationUnit

OrdinaryCompilationUnit:
	[PackageDeclaration] {ImportDeclaration} {TopLevelClassOrInterfaceDeclaration}

ModularCompilationUnit:
	{ImportDeclaration} ModuleDeclaration

PackageDeclaration:
	{PackageModifier} 'package' 'Identifier' {'.' 'Identifier'} ';'

PackageModifier:
	Annotation

ImportDeclaration:
	SingleTypeImportDeclaration
	TypeImportOnDemandDeclaration
	SingleStaticImportDeclaration
	StaticImportOnDemandDeclaration

SingleTypeImportDeclaration:
	'import' TypeName ';'

TypeImportOnDemandDeclaration:
	'import' PackageOrTypeName '.' '*' ';'

SingleStaticImportDeclaration:
	'import' 'static' TypeName '.' 'Identifier' ';'

StaticImportOnDemandDeclaration:
	'import' 'static' TypeName '.' '*' ';'

TopLevelClassOrInterfaceDeclaration:
	ClassDeclaration
	InterfaceDeclaration
	';'

ModuleDeclaration:
	{Annotation} ['open'] 'module' 'Identifier' {'.' 'Identifier'} '{' {ModuleDirective} '}'

ModuleDirective:
	'requires' {RequiresModifier} ModuleName ';'
	'exports' PackageName ['to' ModuleName {',' ModuleName}] ';'
	'opens' PackageName ['to' ModuleName {',' ModuleName}] ';'
	'uses' TypeName ';'
	'provides' TypeName 'with' TypeName {',' TypeName} ';'

RequiresModifier:
	'transitive'
	'static'

# Productions from §8 (Classes)
ClassDeclaration:
	NormalClassDeclaration
	EnumDeclaration
	RecordDeclaration

NormalClassDeclaration:
	{ClassModifier} 'class' 'TypeIdentifier' [TypeParameters] [ClassExtends] [ClassImplements] [ClassPermits] ClassBody

ClassModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'final'
	'sealed'
	'non-sealed'
	'strictfp'

TypeParameters:
	'<' TypeParameterList '>'

TypeParameterList:
	TypeParameter {',' TypeParameter}

ClassExtends:
	'extends' ClassType

ClassImplements:
	'implements' InterfaceTypeList

InterfaceTypeList:
	ClassType {',' ClassType}

ClassPermits:
	'permits' TypeName {',' TypeName}

ClassBody:
	'{' {ClassBodyDeclaration} '}'

ClassBodyDeclaration:
	ClassMemberDeclaration
	InstanceInitializer
	StaticInitializer
	ConstructorDeclaration

ClassMemberDeclaration:
	FieldDeclaration
	MethodDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

FieldDeclaration:
	{FieldModifier} UnannType VariableDeclaratorList ';'

FieldModifier:
	Annotation
	'public'
	'protected'
	'private'
	'static'
	'final'
	'transient'
	'volatile'

VariableDeclaratorList:
	VariableDeclarator {',' VariableDeclarator}

VariableDeclarator:
	VariableDeclaratorId ['=' VariableInitializer]

VariableDeclaratorId:
	'Identifier' [Dims]

VariableInitializer:
	Expression
	ArrayInitializer

UnannType:
	UnannPrimitiveType
	UnannReferenceType

UnannPrimitiveType:
	NumericType
	'boolean'

UnannReferenceType:
	UnannClassType
	UnannArrayType

# May be class, interface or type variable
UnannClassType:
	'TypeIdentifier' [TypeArguments]
	# PackageName or UnannClassType
	UnannClassType '.' SimpleClassType

UnannArrayType:
	UnannPrimitiveType Dims
	UnannClassType Dims

MethodDeclaration:
	{MethodModifier} MethodHeader MethodBody

MethodModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'final'
	'synchronized'
	'native'
	'strictfp'

MethodHeader:
	Result MethodDeclarator [Throws]
	TypeParameters {Annotation} Result MethodDeclarator [Throws]

Result:
	UnannType
	'void'

MethodDeclarator:
	'Identifier' '(' [ReceiverParameter ','] [FormalParameterList] ')' [Dims]

ReceiverParameter:
	{Annotation} UnannType ['Identifier' '.'] 'this'

FormalParameterList:
	FormalParameter {',' FormalParameter}

FormalParameter:
	{VariableModifier} UnannType VariableDeclaratorId
	VariableArityParameter

VariableArityParameter:
	{VariableModifier} UnannType {Annotation} '...' 'Identifier'

VariableModifier:
	Annotation
	'final'

Throws:
	'throws' ExceptionTypeList

ExceptionTypeList:
	ExceptionType {',' ExceptionType}

ExceptionType:
	ClassType # may be a TypeVariable

MethodBody:
	Block
	';'

InstanceInitializer:
	Block

StaticInitializer:
	'static' Block

ConstructorDeclaration:
	{ConstructorModifier} ConstructorDeclarator [Throws] ConstructorBody

ConstructorModifier:
	Annotation
	'public'
	'protected'
	'private'

ConstructorDeclarator:
	[TypeParameters] SimpleTypeName '(' [ReceiverParameter ','] [FormalParameterList] ')'

SimpleTypeName:
	'TypeIdentifier'

ConstructorBody:
	'{' [ExplicitConstructorInvocation] [BlockStatements] '}'

ExplicitConstructorInvocation:
	[TypeArguments] 'this' '(' [ArgumentList] ')' ';'
	[TypeArguments] 'super' '(' [ArgumentList] ')' ';'
	ExpressionName '.' [TypeArguments] 'super' '(' [ArgumentList] ')' ';'
	Primary '.' [TypeArguments] 'super' '(' [ArgumentList] ')' ';'

EnumDeclaration:
	{ClassModifier} 'enum' 'TypeIdentifier' [ClassImplements] EnumBody

EnumBody:
	'{' [EnumConstantList] [','] [EnumBodyDeclarations] '}'

EnumConstantList:
	EnumConstant {',' EnumConstant}

EnumConstant:
	{EnumConstantModifier} 'Identifier' ['(' [ArgumentList] ')'] [ClassBody]

EnumConstantModifier:
	Annotation

EnumBodyDeclarations:
	';' {ClassBodyDeclaration}

RecordDeclaration:
	{ClassModifier} 'record' 'TypeIdentifier' [TypeParameters] RecordHeader [ClassImplements] RecordBody

RecordHeader:
	'(' [RecordComponentList] ')'

RecordComponentList:
	RecordComponent {',' RecordComponent}

RecordComponent:
	{RecordComponentModifier} UnannType 'Identifier'
	VariableArityRecordComponent

VariableArityRecordComponent:
	{RecordComponentModifier} UnannType {Annotation} '...' 'Identifier'

RecordComponentModifier:
	Annotation

RecordBody:
	'{' {RecordBodyDeclaration} '}'

RecordBodyDeclaration:
	ClassBodyDeclaration
	CompactConstructorDeclaration

CompactConstructorDeclaration:
	{ConstructorModifier} SimpleTypeName ConstructorBody

# Productions from §9 (Interfaces)
InterfaceDeclaration:
	NormalInterfaceDeclaration
	AnnotationTypeDeclaration

NormalInterfaceDeclaration:
	{InterfaceModifier} 'interface' 'TypeIdentifier' [TypeParameters] [InterfaceExtends] [InterfacePermits] InterfaceBody

InterfaceModifier:
	Annotation
	'public'
	'protected'
	'private'
	'abstract'
	'static'
	'sealed'
	'non-sealed'
	'strictfp'

InterfaceExtends:
	'extends' InterfaceTypeList

InterfacePermits:
	'permits' TypeName {',' TypeName}

InterfaceBody:
	'{' {InterfaceMemberDeclaration} '}'

InterfaceMemberDeclaration:
	ConstantDeclaration
	InterfaceMethodDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

ConstantDeclaration:
	{ConstantModifier} UnannType VariableDeclaratorList ';'

ConstantModifier:
	Annotation
	'public'
	'static'
	'final'

InterfaceMethodDeclaration:
	{InterfaceMethodModifier} MethodHeader MethodBody

InterfaceMethodModifier:
	Annotation
	'public'
	'private'
	'abstract'
	'default'
	'static'
	'strictfp'

AnnotationTypeDeclaration:
	{InterfaceModifier} '@' 'interface' 'TypeIdentifier' AnnotationTypeBody

AnnotationTypeBody:
	'{' {AnnotationTypeMemberDeclaration} '}'

AnnotationTypeMemberDeclaration:
	AnnotationTypeElementDeclaration
	ConstantDeclaration
	ClassDeclaration
	InterfaceDeclaration
	';'

AnnotationTypeElementDeclaration:
	{AnnotationTypeElementModifier} UnannType 'Identifier' '(' ')' [Dims] [DefaultValue] ';'

AnnotationTypeElementModifier:
	Annotation
	'public'
	'abstract'

DefaultValue:
	'default' ElementValue

Annotation:
	NormalAnnotation
	MarkerAnnotation
	SingleElementAnnotation

NormalAnnotation:
	'@' TypeName '(' [ElementValuePairList] ')'

ElementValuePairList:
	ElementValuePair {',' ElementValuePair}

ElementValuePair:
	'Identifier' '=' ElementValue

ElementValue:
	ConditionalExpression
	ElementValueArrayInitializer
	Annotation

ElementValueArrayInitializer:
	'{' [ElementValueList] [','] '}'

ElementValueList:
	ElementValue {',' ElementValue}

MarkerAnnotation:
	'@' TypeName

SingleElementAnnotation:
	'@' TypeName '(' ElementValue ')'

# Productions from §10 (Arrays)
ArrayInitializer:
	'{' [VariableInitializerList] [','] '}'

VariableInitializerList:
	VariableInitializer {',' VariableInitializer}

# Productions from §14 (Blocks and Statements)
Block:
	'{' [BlockStatements] '}'

BlockStatements:
	BlockStatement {BlockStatement}

BlockStatement:
	LocalClassOrInterfaceDeclaration
	LocalVariableDeclarationStatement
	Statement

LocalClassOrInterfaceDeclaration:
	ClassDeclaration
	NormalInterfaceDeclaration

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ';'

LocalVariableDeclaration:
	{VariableModifier} LocalVariableType VariableDeclaratorList

LocalVariableType:
	UnannType
	'var'

Statement:
	StatementWithoutTrailingSubstatement
	LabeledStatement
	IfThenStatement
	IfThenElseStatement
	WhileStatement
	ForStatement

StatementNoShortIf:
	StatementWithoutTrailingSubstatement
	LabeledStatementNoShortIf
	IfThenElseStatementNoShortIf
	WhileStatementNoShortIf
	ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
	Block
	EmptyStatement
	ExpressionStatement
	AssertStatement
	SwitchStatement
	DoStatement
	BreakStatement
	ContinueStatement
	ReturnStatement
	SynchronizedStatement
	ThrowStatement
	TryStatement
	YieldStatement

EmptyStatement:
	';'

LabeledStatement:
	'Identifier' ':' Statement

LabeledStatementNoShortIf:
	'Identifier' ':' StatementNoShortIf

ExpressionStatement:
	StatementExpression ';'

StatementExpression:
	Assignment
	PreIncrementExpression
	PreDecrementExpression
	PostIncrementExpression
	PostDecrementExpression
	MethodInvocation
	ClassInstanceCreationExpression

IfThenStatement:
	'if' '(' Expression ')' Statement

IfThenElseStatement:
	'if' '(' Expression ')' StatementNoShortIf 'else' Statement

IfThenElseStatementNoShortIf:
	'if' '(' Expression ')' StatementNoShortIf 'else' StatementNoShortIf

AssertStatement:
	'assert' Expression ';'
	'assert' Expression ':' Expression ';'

SwitchStatement:
	'switch' '(' Expression ')' SwitchBlock

# Switch handling changed a bit from grammar to avoid both SwitchBlockStatementGroup and SwitchLabels to
# start with {SwitchLabel}
SwitchBlock:
	'{' SwitchRule {SwitchRule} '}'
	'{' {SwitchBlockStatementGroup} {SwitchLabelColon} '}'

SwitchRule:
	SwitchLabel '->' Expression ';'
	SwitchLabel '->' Block
	SwitchLabel '->' ThrowStatement

SwitchBlockStatementGroup:
	SwitchLabels BlockStatements

SwitchLabels:
	{SwitchLabelColon} SwitchLabelColon

SwitchLabelColon:
	SwitchLabel ':'

SwitchLabel:
# since CaseConstant can be Primary it can be 'null' so allowing *'case' 'null' [',' 'default']* causes dups
# we have code that checks for duplicate nulls and defaults instead
	'case' CaseConstant {',' CaseConstant}
	'case' CasePattern [Guard]
	'default'

CaseConstant:
	ConditionalExpression
	'default'

CasePattern:
	Pattern

Guard:
	'when' Expression

WhileStatement:
	'while' '(' Expression ')' Statement

WhileStatementNoShortIf:
	'while' '(' Expression ')' StatementNoShortIf

DoStatement:
	'do' Statement 'while' '(' Expression ')' ';'

ForStatement:
	BasicForStatement
	EnhancedForStatement

ForStatementNoShortIf:
	BasicForStatementNoShortIf
	EnhancedForStatementNoShortIf

BasicForStatement:
	'for' '(' [ForInit] ';' [Expression] ';' [ForUpdate] ')' Statement

BasicForStatementNoShortIf:
	'for' '(' [ForInit] ';' [Expression] ';' [ForUpdate] ')' StatementNoShortIf

ForInit:
	StatementExpressionList
	LocalVariableDeclaration

ForUpdate:
	StatementExpressionList

StatementExpressionList:
	StatementExpression {',' StatementExpression}

EnhancedForStatement:
	'for' '(' LocalVariableDeclaration ':' Expression ')' Statement

EnhancedForStatementNoShortIf:
	'for' '(' LocalVariableDeclaration ':' Expression ')' StatementNoShortIf

BreakStatement:
	'break' ['Identifier'] ';'

YieldStatement:
	'yield' Expression ';'

ContinueStatement:
	'continue' ['Identifier'] ';'

ReturnStatement:
	'return' [Expression] ';'

ThrowStatement:
	'throw' Expression ';'

SynchronizedStatement:
	'synchronized' '(' Expression ')' Block

TryStatement:
	'try' Block Catches
	'try' Block [Catches] Finally
	TryWithResourcesStatement

Catches:
	CatchClause {CatchClause}

CatchClause:
	'catch' '(' CatchFormalParameter ')' Block

CatchFormalParameter:
	{VariableModifier} CatchType VariableDeclaratorId

CatchType:
	UnannClassType {'|' ClassType}

Finally:
	'finally' Block

TryWithResourcesStatement:
	'try' ResourceSpecification Block [Catches] [Finally]

ResourceSpecification:
	'(' ResourceList [';'] ')'

ResourceList:
	Resource {';' Resource}

Resource:
	LocalVariableDeclaration
	VariableAccess

VariableAccess:
	ExpressionName
	FieldAccess

Pattern:
	TypePattern
	RecordPattern

TypePattern:
	LocalVariableDeclaration

RecordPattern:
	ReferenceType '(' [PatternList] ')'

PatternList:
	Pattern {',' Pattern}

# Productions from §15 (Expressions)
Primary:
	PrimaryNoNewArray
	ArrayCreationExpression

PrimaryNoNewArray:
	Literal
	ClassLiteral
	'this'
	TypeName '.' 'this'
	'(' Expression ')'
	ClassInstanceCreationExpression
	FieldAccess
	ArrayAccess
	MethodInvocation
	MethodReference

ClassLiteral:
	TypeName {'[' ']'} '.' 'class'
	NumericType {'[' ']'} '.' 'class'
	'boolean' {'[' ']'} '.' 'class'
	'void' '.' 'class'

ClassInstanceCreationExpression:
	UnqualifiedClassInstanceCreationExpression
	ExpressionName '.' UnqualifiedClassInstanceCreationExpression
	Primary '.' UnqualifiedClassInstanceCreationExpression

UnqualifiedClassInstanceCreationExpression:
	'new' [TypeArguments] ClassOrInterfaceTypeToInstantiate '(' [ArgumentList] ')' [ClassBody]

ClassOrInterfaceTypeToInstantiate:
	{Annotation} 'Identifier' {'.' {Annotation} 'Identifier'} [TypeArgumentsOrDiamond]

TypeArgumentsOrDiamond:
	TypeArguments
	'<' '>'

ArrayCreationExpression:
	ArrayCreationExpressionWithoutInitializer
	ArrayCreationExpressionWithInitializer

ArrayCreationExpressionWithoutInitializer:
	'new' PrimitiveType DimExprs [Dims]
	'new' ClassType DimExprs [Dims]

ArrayCreationExpressionWithInitializer:
	'new' PrimitiveType Dims ArrayInitializer
	'new' ClassType Dims ArrayInitializer

DimExprs:
	DimExpr {DimExpr}

DimExpr:
	{Annotation} '[' Expression ']'

ArrayAccess:
	ExpressionName '[' Expression ']'
	PrimaryNoNewArray '[' Expression ']'
	ArrayCreationExpressionWithInitializer '[' Expression ']'

FieldAccess:
	Primary '.' 'Identifier'
	'super' '.' 'Identifier'
	TypeName '.' 'super' '.' 'Identifier'

MethodInvocation:
	UntypedMethodInvocation
	# We can't differ between TypeName and ExpressionName
	AmbiguousName '.' [TypeArguments] UntypedMethodInvocation
	Primary '.' [TypeArguments] UntypedMethodInvocation
	'super' '.' [TypeArguments] UntypedMethodInvocation
	TypeName '.' 'super' '.' [TypeArguments] UntypedMethodInvocation

UntypedMethodInvocation:
	MethodName '(' [ArgumentList] ')'

ArgumentList:
	Expression {',' Expression}

MethodReference:
	Primary '::' [TypeArguments] 'Identifier'
	# We can't differ between ExpressionName and ReferenceType
	AmbiguousName '::' [TypeArguments] 'Identifier'
	'super' '::' [TypeArguments] 'Identifier'
	TypeName '.' 'super' '::' [TypeArguments] 'Identifier'
	ClassType '::' [TypeArguments] 'new'
	ArrayType '::' 'new'

Expression:
	LambdaExpression
	AssignmentExpression

LambdaExpression:
	LambdaParameters '->' LambdaBody

LambdaParameters:
	'(' [LambdaParameterList] ')'
	'Identifier'

LambdaParameterList:
	LambdaParameter {',' LambdaParameter}
	'Identifier' {',' 'Identifier'}

LambdaParameter:
	{VariableModifier} LambdaParameterType VariableDeclaratorId
	VariableArityParameter

LambdaParameterType:
	UnannType
	'var'

LambdaBody:
	Expression
	Block

AssignmentExpression:
	ConditionalExpression
	Assignment

Assignment:
	LeftHandSide AssignmentOperator Expression

LeftHandSide:
	ExpressionName
	FieldAccess
	ArrayAccess

AssignmentOperator:
	'='
	'*='
	'/='
	'%='
	'+='
	'-='
	'<<='
	'>>='
	'>>>='
	'&='
	'^='
	'|='

ConditionalExpression:
	ConditionalOrExpression
	ConditionalOrExpression '?' Expression ':' ConditionalExpression
	ConditionalOrExpression '?' Expression ':' LambdaExpression

ConditionalOrExpression:
	ConditionalAndExpression
	ConditionalOrExpression '||' ConditionalAndExpression

ConditionalAndExpression:
	InclusiveOrExpression
	ConditionalAndExpression '&&' InclusiveOrExpression

InclusiveOrExpression:
	ExclusiveOrExpression
	InclusiveOrExpression '|' ExclusiveOrExpression

ExclusiveOrExpression:
	AndExpression
	ExclusiveOrExpression '^' AndExpression

AndExpression:
	EqualityExpression
	AndExpression '&' EqualityExpression

EqualityExpression:
	RelationalExpression
	EqualityExpression '==' RelationalExpression
	EqualityExpression '!=' RelationalExpression

RelationalExpression:
	ShiftExpression
	RelationalExpression '<' ShiftExpression
	RelationalExpression '>' ShiftExpression
	RelationalExpression '<=' ShiftExpression
	RelationalExpression '>=' ShiftExpression
	InstanceofExpression

InstanceofExpression:
	RelationalExpression 'instanceof' ReferenceType
	RelationalExpression 'instanceof' Pattern

ShiftExpression:
	AdditiveExpression
	ShiftExpression ShiftOp AdditiveExpression

ShiftOp:
	'<<'
	'>' '>'
	'>' '>' '>'

AdditiveExpression:
	MultiplicativeExpression
	AdditiveExpression '+' MultiplicativeExpression
	AdditiveExpression '-' MultiplicativeExpression

MultiplicativeExpression:
	UnaryExpression
	MultiplicativeExpression '*' UnaryExpression
	MultiplicativeExpression '/' UnaryExpression
	MultiplicativeExpression '%' UnaryExpression

UnaryExpression:
	PreIncrementExpression
	PreDecrementExpression
	'+' UnaryExpression
	'-' UnaryExpression
	UnaryExpressionNotPlusMinus

PreIncrementExpression:
	'++' UnaryExpression

PreDecrementExpression:
	'--' UnaryExpression

UnaryExpressionNotPlusMinus:
	PostfixExpression
	'~' UnaryExpression
	'!' UnaryExpression
	CastExpression
	SwitchExpression

PostfixExpression:
	Primary
	ExpressionName
	PostIncrementExpression
	PostDecrementExpression

PostIncrementExpression:
	PostfixExpression '++'

PostDecrementExpression:
	PostfixExpression '--'

CastExpression:
	'(' PrimitiveType ')' UnaryExpression
	'(' ReferenceType {AdditionalBound} ')' UnaryExpressionNotPlusMinus
	'(' ReferenceType {AdditionalBound} ')' LambdaExpression

SwitchExpression:
	'switch' '(' Expression ')' SwitchBlock

ConstantExpression:
	Expression
